<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>BookSy - Your Favorite Bookstore</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
       .page-gradient-bg {
        background: linear-gradient(135deg, #f3e7d3 0%, #e6d7c3 25%, #d9c7b3 50%, #e6d7c3 75%, #f3e7d3 100%);
    }
    .book-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    .hero-section {
      background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('/api/placeholder/1200/400');
      background-size: cover;
      background-position: center;
    }
     /* Animation keyframes */
  @keyframes fadeInUp {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
  
  @keyframes floatBook {
    0% { transform: translateY(0) rotate(0deg); }
    50% { transform: translateY(-10px) rotate(3deg); }
    100% { transform: translateY(0) rotate(0deg); }
  }
  
  /* Applied animations */
  .animate-fadeInUp {
    animation: fadeInUp 1s ease-out forwards;
  }
  
  .animate-float {
    animation: floatBook 3s ease-in-out infinite;
  }
  
  /* Book styling */
  .book-cover {
    height: 220px;
    width: 150px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    transition: transform 0.3s ease;
    border-radius: 4px;
    overflow: hidden;
  }
  
  .book-cover:hover {
    transform: translateY(-10px) scale(1.05);
  }
  
  /* Active slide */
  .hero-slide.active {
    opacity: 1;
    z-index: 10;
  }
  
  /* Active indicator */
  .slide-indicator.active {
    opacity: 1;
    width: 24px;
  }
  @keyframes gradient-shift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  
  .animate-gradient-shift {
    background-size: 200% 200%;
    animation: gradient-shift 10s ease infinite;
  }
  </style>
</head>
<body class="bg-gray-50">

<!-- Navbar (shared partial) -->
<%- include('../partials/navbar') %>
<div class="container mx-auto px-4 py-8">
  <h1 class="text-3xl font-bold mb-8">Your Shopping Cart</h1>
  
  <% if (cart && ((cart.items && cart.items.length > 0) || (cart.unavailableItems && cart.unavailableItems.length > 0))) { %>
    <% if (locals.itemsRestoredCount && locals.itemsRestoredCount > 0) { %>
      <div class="bg-green-100 border-l-4 border-green-500 text-green-700 p-4 mb-6" role="alert">
        <p class="font-bold">Good news!</p>
        <p><%= locals.itemsRestoredCount %> <%= locals.itemsRestoredCount === 1 ? 'item' : 'items' %> in your cart <%= locals.itemsRestoredCount === 1 ? 'has' : 'have' %> become available again and can now be purchased.</p>
      </div>
    <% } %>
    
    <% if (cart.unavailableItems && cart.unavailableItems.length > 0) { %>
      <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 mb-6" role="alert">
        <p class="font-bold">Attention</p>
        <p>One or more items in your cart are no longer available or out of stock. Please remove them to proceed to checkout.</p>
      </div>
    <% } %>
    
    <div class="flex flex-col lg:flex-row gap-8">
      <!-- Cart Items -->
      <div class="lg:w-2/3">
        <div class="bg-white rounded-lg shadow-md">
          <div class="border-b py-3 px-4 flex items-center font-medium text-gray-600">
            <div class="w-full lg:w-2/5">Product</div>
            <div class="hidden lg:block lg:w-1/5 text-center">Price</div>
            <div class="hidden lg:block lg:w-1/5 text-center">Quantity</div>
            <div class="hidden lg:block lg:w-1/5 text-center">Subtotal</div>
          </div>
          
          <!-- Available Items -->
          <% cart.items.forEach(item => { %>
            <div class="p-4 border-b last:border-b-0 flex flex-col lg:flex-row items-center">
              <!-- Product info -->
              <div class="w-full lg:w-2/5 flex items-center mb-4 lg:mb-0">
                <div class="w-20 h-20 flex-shrink-0">
                  <img src="<%= item.product.coverImage %>" alt="<%= item.product.title %>" class="w-full h-full object-cover rounded">
                </div>
                <div class="ml-4">
                  <h3 class="text-lg font-medium"><%= item.product.title %></h3>
                  <p class="text-gray-600 text-sm">By <%= item.product.author %></p>
                  
                  <!-- Display offer information -->
                  <% if (item.discountSource === 'category') { %>
                    <p class="text-green-600 text-sm font-medium">Category offer: <%= item.discountPercentage %>% off</p>
                  <% } else if (item.discountSource === 'product') { %>
                    <p class="text-green-600 text-sm font-medium">Product offer: <%= item.discountPercentage %>% off</p>
                  <% } %>
                  
                  <button type="button" class="text-red-500 text-sm mt-1 remove-item" data-item-id="<%= item.product._id %>">Remove</button>
                </div>
              </div>
              
              <!-- Price (mobile and desktop) -->
              <div class="w-full lg:w-1/5 flex justify-between items-center lg:justify-center mb-3 lg:mb-0">
                <span class="lg:hidden">Price:</span>
                <div>
                  <% if (item.discountSource && item.discountSource !== 'none') { %>
                    <span class="line-through text-gray-500 text-sm">₹<%= item.product.price.toFixed(2) %></span>
                    <span class="text-green-600">₹<%= item.price.toFixed(2) %></span>
                  <% } else { %>
                    <span>₹<%= item.price.toFixed(2) %></span>
                  <% } %>
                </div>
              </div>
              
              <!-- Quantity controls -->
              <div class="w-full lg:w-1/5 flex justify-between items-center lg:justify-center mb-3 lg:mb-0">
                <span class="lg:hidden">Quantity:</span>
                <div class="flex items-center">
                  <!-- Modify the quantity buttons in your cart.ejs file -->
                  <button type="button" class="quantity-btn bg-gray-200 px-3 py-1 rounded-l-md decrement-quantity" data-item-id="<%= item.product._id %>">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                    </svg>
                  </button>
                  <input type="number" class="quantity-input border text-center w-12 py-1" value="<%= item.quantity %>" min="1" max="<%= Math.min(4, item.product.stock) %>" data-item-id="<%= item.product._id %>" readonly>
                  <button type="button" class="quantity-btn bg-gray-200 px-3 py-1 rounded-r-md increment-quantity" data-item-id="<%= item.product._id %>">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                  </button>
                </div>
              </div>
              
              <!-- Subtotal (mobile and desktop) -->
              <div class="w-full lg:w-1/5 flex justify-between items-center lg:justify-center">
                <span class="lg:hidden">Subtotal:</span>
                <span class="font-medium">₹<%= (item.price * item.quantity).toFixed(2) %></span>
              </div>
            </div>
          <% }) %>
          
          <!-- Unavailable Items -->
          <% if (cart.unavailableItems && cart.unavailableItems.length > 0) { %>
            <div class="bg-gray-50 p-2 border-t">
              <h3 class="text-md font-medium text-gray-700 px-4 py-2">Unavailable Items</h3>
            </div>
            
            <% cart.unavailableItems.forEach(unavailableItem => { %>
              <div class="p-4 border-b last:border-b-0 flex flex-col lg:flex-row items-center opacity-50">
                <!-- Product info -->
                <div class="w-full lg:w-2/5 flex items-center mb-4 lg:mb-0">
                  <div class="w-20 h-20 flex-shrink-0">
                    <img src="<%= unavailableItem.item.product.coverImage %>" alt="<%= unavailableItem.item.product.title %>" class="w-full h-full object-cover rounded">
                  </div>
                  <div class="ml-4">
                    <h3 class="text-lg font-medium"><%= unavailableItem.item.product.title %></h3>
                    <p class="text-gray-600 text-sm">By <%= unavailableItem.item.product.author %></p>
                    <p class="text-red-500 text-sm mt-1">
                      <% if (unavailableItem.reason === 'outOfStock') { %>
                        Out of stock
                      <% } else if (unavailableItem.reason === 'productUnavailable') { %>
                        No longer available
                      <% } else { %>
                        Category unavailable
                      <% } %>
                    </p>
                    <button type="button" class="text-red-500 text-sm mt-1 remove-item" data-item-id="<%= unavailableItem.item.product._id %>">Remove</button>
                  </div>
                </div>
                
                <!-- Price (mobile and desktop) -->
                <div class="w-full lg:w-1/5 flex justify-between items-center lg:justify-center mb-3 lg:mb-0">
                  <span class="lg:hidden">Price:</span>
                  <span>₹<%= unavailableItem.item.price.toFixed(2) %></span>
                </div>
                
                <!-- Quantity controls (disabled) -->
                <div class="w-full lg:w-1/5 flex justify-between items-center lg:justify-center mb-3 lg:mb-0">
                  <span class="lg:hidden">Quantity:</span>
                  <div class="flex items-center">
                    <button type="button" class="quantity-btn bg-gray-200 px-3 py-1 rounded-l-md" disabled>
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 12H4" />
                      </svg>
                    </button>
                    <input type="number" class="quantity-input border text-center w-12 py-1" value="<%= unavailableItem.item.quantity %>" readonly disabled>
                    <button type="button" class="quantity-btn bg-gray-200 px-3 py-1 rounded-r-md" disabled>
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                      </svg>
                    </button>
                  </div>
                </div>
                
                <!-- Subtotal (mobile and desktop) -->
                <div class="w-full lg:w-1/5 flex justify-between items-center lg:justify-center">
                  <span class="lg:hidden">Subtotal:</span>
                  <span class="font-medium">₹<%= (unavailableItem.item.price * unavailableItem.item.quantity).toFixed(2) %></span>
                </div>
              </div>
            <% }) %>
          <% } %>
        </div>
      </div>
      
    <!-- Order Summary -->
    <div class="lg:w-1/3">
      <div class="bg-white rounded-lg shadow-md p-6">
        <h2 class="text-xl font-bold mb-4">Order Summary</h2>
        
        <div class="border-t border-b py-4 mb-4">
          <div class="flex justify-between mb-2">
            <span>Subtotal</span>
            <span>₹<%= cart.totalAmount.toFixed(2) %></span>
          </div>
          
          <!-- Add this section to show offers -->
          <%
          // Initialize these flags in case items don't have discount info
          let hasProductOffers = false;
          let hasCategoryOffers = false;
          
          if (cart && cart.items) {
            cart.items.forEach(item => {
              if (item.discountSource === 'product') hasProductOffers = true;
              if (item.discountSource === 'category') hasCategoryOffers = true;
            });
          }
        %>
          <% if (hasProductOffers || hasCategoryOffers) { %>
            <div class="border-t pt-2 mt-2">
              <div class="text-green-600 font-medium mb-1">Applied Offers:</div>
              <% if (hasProductOffers) { %>
                <div class="flex justify-between mb-1 text-sm">
                  <span>Product Offers</span>
                  <span>Applied</span>
                </div>
              <% } %>
              <% if (hasCategoryOffers) { %>
                <div class="flex justify-between mb-1 text-sm">
                  <span>Category Offers</span>
                  <span>Applied</span>
                </div>
              <% } %>
            </div>
          <% } %>
          
          <div class="flex justify-between">
            <span>Shipping</span>
            <span>Free</span>
          </div>
        </div>
        
        <div class="flex justify-between font-bold text-lg mb-6">
          <span>Total</span>
          <span>₹<%= cart.totalAmount.toFixed(2) %></span>
        </div>
        
        <!-- Replace the "Proceed to Checkout" link with a button -->
        <button id="proceed-to-checkout-btn" class="block text-center <%= cart.unavailableItems && cart.unavailableItems.length > 0 ? 'bg-gray-400 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700' %> text-white py-3 px-4 rounded-md font-medium w-full" <%= cart.unavailableItems && cart.unavailableItems.length > 0 ? 'onclick="event.preventDefault(); showUnavailableItemsAlert();"' : '' %>>
          Proceed to Checkout
        </button>
      </div>
    </div>
    </div>
  <% } else { %>
    <div class="text-center py-16 bg-white rounded-lg shadow">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-gray-400 mx-auto mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z" />
      </svg>
      <h2 class="text-2xl font-bold mb-4">Your cart is empty</h2>
      <p class="text-gray-600 mb-8">Looks like you haven't added any books to your cart yet.</p>
      <a href="/products" class="inline-block bg-blue-600 text-white py-3 px-6 rounded-md font-medium hover:bg-blue-700">
        Continue Shopping
      </a>
    </div>
  <% } %>
</div>
<script>
document.addEventListener('DOMContentLoaded', function() {
  // Add this function to show alert when checkout is attempted with unavailable items
  window.showUnavailableItemsAlert = function() {
    const toast = document.createElement('div');
    toast.className = 'fixed top-4 right-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded shadow-md z-50';
    toast.innerHTML = `
      <div class="flex items-center">
        <div class="mr-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        </div>
        <p>Please remove unavailable items from your cart to proceed to checkout.</p>
      </div>
    `;
    document.body.appendChild(toast);
    
    // Remove the toast after 4 seconds
    setTimeout(() => {
      document.body.removeChild(toast);
    }, 4000);
  };
  
  // Add validation check before proceeding to checkout
  const checkoutButton = document.getElementById('proceed-to-checkout-btn');
  if (checkoutButton) {
    checkoutButton.addEventListener('click', function(event) {
      // Only run validation if the button is not already disabled due to unavailable items
      if (!this.classList.contains('cursor-not-allowed')) {
        event.preventDefault();
        validateCartBeforeCheckout();
      }
    });
  }

  // Function to validate cart before checkout
  function validateCartBeforeCheckout() {
    fetch('/cart/validate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      }
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // If validation is successful, redirect to checkout
        window.location.href = '/checkout';
      } else {
        // If validation fails, show error message
        showValidationError(data);
      }
    })
    .catch(error => {
      console.error('Error validating cart:', error);
      showToast('An error occurred while validating your cart', 'error');
    });
  }

  // Function to show validation error
  function showValidationError(data) {
    // Create a modal to display invalid items
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    
    let invalidItemsHtml = '';
    if (data.invalidItems && data.invalidItems.length > 0) {
      invalidItemsHtml = `
        <ul class="text-red-600 mt-2 mb-4">
          ${data.invalidItems.map(item => `<li class="mb-2">• ${item.title} - ${item.reason}</li>`).join('')}
        </ul>
      `;
    }
    
    modal.innerHTML = `
      <div class="bg-white p-6 rounded-lg max-w-md mx-auto">
        <div class="flex items-center mb-4">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-red-500 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <h3 class="text-lg font-bold text-gray-900">Cart Update Required</h3>
        </div>
        <p class="mb-2">${data.message}</p>
        ${invalidItemsHtml}
        <p class="mb-4">Please refresh the page to update your cart before proceeding to checkout.</p>
        <div class="flex justify-end space-x-4">
          <button class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700" id="refreshCart">
            Refresh Cart
          </button>
        </div>
      </div>
    `;
    
    document.body.appendChild(modal);
    
    // Add event listener to refresh button
    document.getElementById('refreshCart').addEventListener('click', () => {
      window.location.reload();
    });
  }
  
  // Rest of your existing JavaScript
  // Handle quantity increment
  document.querySelectorAll('.increment-quantity').forEach(button => {
    button.addEventListener('click', function() {
      const itemId = this.getAttribute('data-item-id');
      updateCartItemQuantity(itemId, 1);
    });
  });
  
  // Handle quantity decrement
  document.querySelectorAll('.decrement-quantity').forEach(button => {
    button.addEventListener('click', function() {
      const itemId = this.getAttribute('data-item-id');
      updateCartItemQuantity(itemId, -1);
    });
  });
  
  // Make sure event listeners are added to all remove buttons
  document.querySelectorAll('.remove-item').forEach(button => {
    button.addEventListener('click', function() {
      const itemId = this.getAttribute('data-item-id');
      removeCartItem(itemId);
    });
  });
  
  // Updated function to update cart item quantity
  function updateCartItemQuantity(productId, change) {
    fetch('/cart/update', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ productId, change }),
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        window.location.reload();
      } else {
        // Show the message regardless of whether the operation was successful
        showToast(data.message, data.limitReached ? 'warning' : 'error');
      }
    })
    .catch(error => {
      showToast('An error occurred', 'error');
    });
  }
  
  // Updated function to remove item from cart
  function removeCartItem(productId, confirmed = false) {
    fetch('/cart/remove', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ productId, confirmed }),
    })
    .then(response => response.json())
    .then(data => {
      if (data.success) {
        // Update cart count in the UI if provided
        if (data.cartCount !== undefined) {
          const cartCountEl = document.querySelector('.fa-cart-shopping + span');
          if (cartCountEl) {
            cartCountEl.textContent = data.cartCount;
          }
        }
        window.location.reload();
      } else if (data.requireConfirmation) {
        // Create and show a modal for confirmation
        const modal = document.createElement('div');
        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
        modal.innerHTML = `
          <div class="bg-white p-6 rounded-lg max-w-md mx-auto">
            <h3 class="text-lg font-bold mb-4">Confirm Removal</h3>
            <p class="mb-6">${data.message}</p>
            <div class="flex justify-end space-x-4">
              <button class="px-4 py-2 bg-gray-200 rounded" id="cancelRemove">Cancel</button>
              <button class="px-4 py-2 bg-red-600 text-white rounded" id="confirmRemove" 
                data-item-id="${data.productId}">Remove</button>
            </div>
          </div>
        `;
        document.body.appendChild(modal);
        
        // Add event listeners to the modal buttons
        document.getElementById('cancelRemove').addEventListener('click', () => {
          document.body.removeChild(modal);
        });
        
        document.getElementById('confirmRemove').addEventListener('click', () => {
          const itemId = document.getElementById('confirmRemove').getAttribute('data-item-id');
          document.body.removeChild(modal);
          removeCartItem(itemId, true);
        });
      } else {
        showToast(data.message || 'Failed to remove item', 'error');
      }
    })
    .catch(error => {
      console.error('Error removing item:', error);
      showToast('An error occurred', 'error');
    });
  }
  
  // Enhanced toast function with better visibility and positioning
  function showToast(message, type = 'info') {
    const toast = document.createElement('div');
    const colors = {
      info: 'bg-blue-100 border-blue-500 text-blue-700',
      warning: 'bg-amber-100 border-amber-500 text-amber-700',
      error: 'bg-red-100 border-red-500 text-red-700',
      success: 'bg-green-100 border-green-500 text-green-700'
    };
    
    toast.className = `fixed top-4 inset-x-0 mx-auto max-w-md ${colors[type]} border-l-4 p-4 rounded shadow-md z-50`;
    toast.innerHTML = `
      <div class="flex items-center">
        <div class="mr-2">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
          </svg>
        </div>
        <p>${message}</p>
      </div>
    `;
    document.body.appendChild(toast);
    
    // Remove the toast after 3 seconds
    setTimeout(() => {
      document.body.removeChild(toast);
    }, 3000);
  }
});
</script>

<%- include('../partials/footer') %>