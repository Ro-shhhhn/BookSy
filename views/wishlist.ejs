<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>BookSy - Your Favorite Bookstore</title>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    .book-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 10px 20px rgba(0,0,0,0.1);
    }
    .hero-section {
      background-image: linear-gradient(rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.5)), url('/api/placeholder/1200/400');
      background-size: cover;
      background-position: center;
    }
  </style>
</head>
<body class="bg-gray-50">

<!-- Navbar (shared partial) -->
<%- include('partials/navbar') %>
<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6">My Wishlist</h1>
    
    <% if (wishlistItems && wishlistItems.length > 0) { %>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        <% wishlistItems.forEach(product => { %>
          <div class="bg-white rounded-lg shadow overflow-hidden hover:shadow-lg transition-all relative">
            <!-- Wishlist Icon -->
            <button 
              class="wishlist-btn absolute top-3 right-3 z-10 bg-white bg-opacity-80 p-2 rounded-full shadow-sm hover:bg-opacity-100 transition-all"
              data-product-id="<%= product._id %>"
            >
              <i class="fas fa-heart text-red-500 hover:text-gray-500 transition-colors"></i>
            </button>
            
            <a href="/products/<%= product._id %>" class="block">
              <!-- Fixed Image Container -->
              <div class="relative h-64">
                <img 
                  src="<%= product.coverImage %>" 
                  alt="<%= product.title %>"
                  class="absolute inset-0 w-full h-full object-cover"
                />
                <% if (product.discountPrice > 0) { %>
                  <div class="absolute top-2 left-2 bg-red-500 text-white px-2 py-1 rounded-full text-xs font-bold">
                    <%= Math.round((product.discountPrice / product.price) * 100) %>% OFF
                  </div>
                <% } %>
              </div>
              <div class="p-4">
                <h3 class="text-lg font-semibold text-gray-800 line-clamp-2"><%= product.title %></h3>
                <p class="text-gray-600 mt-1"><%= product.author %></p>
                <div class="mt-3 flex items-end">
                  <% if (product.discountPrice > 0) { %>
                    <span class="text-lg font-bold text-gray-800">₹<%= product.price - product.discountPrice %></span>
                    <span class="text-sm text-gray-500 line-through ml-2">₹<%= product.price %></span>
                  <% } else { %>
                    <span class="text-lg font-bold text-gray-800">₹<%= product.price %></span>
                  <% } %>
                </div>
              </div>
            </a>
            <!-- Add to Cart Button -->
            <div class="px-4 pb-4 mt-auto">
              <button 
                class="add-to-cart-btn w-full <%= product.stock <= 0 ? 'opacity-50 cursor-not-allowed bg-blue-600' : (userCartItems && userCartItems.includes(product._id.toString()) ? 'bg-green-600 hover:bg-green-700' : 'bg-blue-600 hover:bg-blue-700') %> text-white font-medium py-2 px-4 rounded transition-colors"
                <%= product.stock <= 0 ? 'disabled' : '' %>
                data-product-id="<%= product._id %>"
                data-state="<%= userCartItems && userCartItems.includes(product._id.toString()) ? 'go' : 'add' %>"
              >
                <i class="fas <%= userCartItems && userCartItems.includes(product._id.toString()) ? 'fa-arrow-right' : 'fa-shopping-cart' %> mr-2"></i> 
                <%= userCartItems && userCartItems.includes(product._id.toString()) ? 'Go to Cart' : 'Add to Cart' %>
              </button>
            </div>
          </div>
        <% }) %>
      </div>
    <% } else { %>
      <div class="bg-white p-8 rounded-lg shadow text-center">
        <i class="far fa-heart text-5xl text-gray-400 mb-4"></i>
        <h3 class="text-xl font-semibold text-gray-800 mb-2">Your wishlist is empty</h3>
        <p class="text-gray-600 mb-4">
          Save items you want to purchase later by clicking the heart icon on product pages
        </p>
        <a href="/products" class="inline-block mt-4 bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700">
          Browse Products
        </a>
      </div>
    <% } %>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Wishlist button functionality
      const wishlistButtons = document.querySelectorAll('.wishlist-btn');
      
      wishlistButtons.forEach(button => {
        button.addEventListener('click', function() {
          const productId = this.getAttribute('data-product-id');
          
          fetch('/wishlist/toggle', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({ productId }),
          })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Update icon and styles
              const heartIcon = this.querySelector('i');
              
              if (data.inWishlist) {
                heartIcon.classList.remove('far');
                heartIcon.classList.add('fas', 'text-red-500');
                heartIcon.classList.remove('text-gray-700');
                
                // If we're on the wishlist page, don't remove the item immediately
                // Instead show a notification
                if (window.location.pathname === '/wishlist') {
                  showNotification('Item removed from wishlist. Refreshing...', 'success');
                  setTimeout(() => {
                    window.location.reload();
                  }, 1000);
                } else {
                  showNotification('Added to wishlist', 'success');
                }
              } else {
                heartIcon.classList.remove('fas', 'text-red-500');
                heartIcon.classList.add('far', 'text-gray-700');
                
                // If we're on the wishlist page, remove the item
                if (window.location.pathname === '/wishlist') {
                  // Find the parent card and remove it with animation
                  const card = this.closest('.bg-white');
                  card.style.opacity = '0';
                  setTimeout(() => {
                    card.remove();
                    
                    // If no more items, reload to show empty state
                    if (document.querySelectorAll('.wishlist-btn').length === 0) {
                      window.location.reload();
                    }
                  }, 300);
                  
                  showNotification('Removed from wishlist', 'success');
                } else {
                  showNotification('Removed from wishlist', 'success');
                }
              }
            } else if (data.requireLogin) {
              showNotification('Please login to manage your wishlist', 'warning');
              
              // Store current URL to return after login
              localStorage.setItem('redirectAfterLogin', window.location.pathname);
              
              // Redirect to login
              setTimeout(() => {
                window.location.href = '/login';
              }, 2000);
            } else {
              showNotification(data.message || 'Failed to update wishlist', 'error');
            }
          })
          .catch(error => {
            showNotification('Error updating wishlist', 'error');
            console.error('Error:', error);
          });
        });
      });
      
      // Add to cart functionality (same as in products page)
      const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
      
      addToCartButtons.forEach(button => {
        button.addEventListener('click', function() {
          const productId = this.getAttribute('data-product-id');
          const buttonState = this.getAttribute('data-state');
          
          if (buttonState === 'go') {
            window.location.href = '/cart';
            return;
          }
          
          const quantity = 1;
          
          if (!this.hasAttribute('disabled')) {
            addToCart(productId, quantity, this);
          }
        });
      });
      
      function addToCart(productId, quantity, buttonElement) {
  fetch('/cart/add', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ productId, quantity }),
  })
  .then(response => {
    if (response.redirected) {
      window.location.href = response.url;
      return Promise.reject();
    }
    return response.json();
  })
  .then(data => {
    if (data.success) {
      buttonElement.innerHTML = '<i class="fas fa-arrow-right mr-2"></i> Go to Cart';
      buttonElement.classList.remove('bg-blue-600', 'hover:bg-blue-700');
      buttonElement.classList.add('bg-green-600', 'hover:bg-green-700');
      buttonElement.setAttribute('data-state', 'go');
      
      // If moving to cart from wishlist, remove from wishlist
      if (window.location.pathname === '/wishlist') {
        // Find the product ID
        const productId = buttonElement.getAttribute('data-product-id');
        
        // Make an API call to remove from wishlist
        fetch('/wishlist/remove', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ productId }),
        })
        .then(res => res.json())
        .then(() => {
          // Remove the product card from the DOM
          const card = buttonElement.closest('.bg-white');
          card.style.opacity = '0';
          setTimeout(() => {
            card.remove();
            
            // If no more items, reload to show empty state
            if (document.querySelectorAll('.add-to-cart-btn').length === 0) {
              window.location.reload();
            }
            
            showNotification('Item moved to cart from wishlist', 'success');
          }, 300);
        });
      } else {
        showNotification('Added to cart', 'success');
      }
    } else if (data.requireLogin) {
      showNotification('Please login to add items to your cart', 'warning');
      localStorage.setItem('redirectAfterLogin', window.location.pathname);
      setTimeout(() => {
        window.location.href = '/login';
      }, 2000);
    } else {
      showNotification(data.message || 'Failed to add to cart', 'error');
    }
  })
  .catch(error => {
    if (error && error.message) {
      showNotification(error.message, 'error');
    }
  });
}
      
      // Notification function
      function showNotification(message, type) {
        const notification = document.createElement('div');
        
        let bgColor = 'bg-green-500'; // success
        if (type === 'error') bgColor = 'bg-red-500';
        if (type === 'warning') bgColor = 'bg-yellow-500';
        
        notification.className = `fixed top-4 right-4 ${bgColor} text-white px-4 py-2 rounded shadow-lg z-50`;
        notification.innerHTML = message;
        document.body.appendChild(notification);
        
        setTimeout(() => {
          notification.remove();
        }, 3000);
      }
    });
  </script>
  
  <%- include('partials/footer') %>